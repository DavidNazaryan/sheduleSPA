#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ vm-fc7b7f29.na4u.ru
"""

import requests
import json
import os
import subprocess
import sys
from datetime import datetime

def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    try:
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        if 'uvicorn' in result.stdout:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä uvicorn –∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä uvicorn –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 8000
    try:
        result = subprocess.run(['netstat', '-tlnp'], capture_output=True, text=True)
        if ':8000' in result.stdout:
            print("‚úÖ –ü–æ—Ä—Ç 8000 –æ—Ç–∫—Ä—ã—Ç")
        else:
            print("‚ùå –ü–æ—Ä—Ç 8000 –Ω–µ –æ—Ç–∫—Ä—ã—Ç")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç—ã")

def check_webhook_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å webhook"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook")
    print("=" * 50)
    
    BOT_TOKEN = "8296584992:AAFmltay1-OZolKK0AoF8pdKF2kELfg4boA"
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
    
    try:
        response = requests.get(url)
        result = response.json()
        
        if result.get("ok"):
            webhook_info = result.get("result", {})
            print(f"URL: {webhook_info.get('url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
            print(f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if webhook_info.get('url') else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            print(f"–û—à–∏–±–∫–∏: {webhook_info.get('last_error_message', '–ù–µ—Ç')}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {webhook_info.get('last_error_count', 0)}")
            
            if webhook_info.get('url') == 'https://vm-fc7b7f29.na4u.ru/webhook':
                print("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                print("‚ùå Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {e}")

def test_local_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ endpoints"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö endpoints")
    print("=" * 50)
    
    base_url = "http://localhost:8000"
    endpoints = [
        "/",
        "/api/options/faculties",
        "/api/options/courses?faculty=5",
        "/api/options/groups?faculty=5&course=1"
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", timeout=5)
            print(f"‚úÖ {endpoint}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå {endpoint}: {e}")

def test_webhook_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook endpoint"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint")
    print("=" * 50)
    
    test_data = {
        "update_id": 123456789,
        "message": {
            "message_id": 1,
            "from": {
                "id": 123456789,
                "is_bot": False,
                "first_name": "Test",
                "last_name": "User",
                "username": "testuser"
            },
            "chat": {
                "id": 123456789,
                "first_name": "Test",
                "last_name": "User",
                "username": "testuser",
                "type": "private"
            },
            "date": 1234567890,
            "text": "/start"
        }
    }
    
    try:
        response = requests.post("http://localhost:8000/webhook", json=test_data, timeout=5)
        print(f"‚úÖ Webhook: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.json()}")
    except Exception as e:
        print(f"‚ùå Webhook: {e}")

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 50)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª–æ–≥–∏
    log_files = [
        "/var/log/nginx/error.log",
        "/var/log/nginx/access.log",
        "/var/log/syslog",
        "/var/log/messages"
    ]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            try:
                result = subprocess.run(['tail', '-n', '10', log_file], capture_output=True, text=True)
                print(f"üìÑ {log_file}:")
                print(result.stdout)
                break
            except:
                continue
    
    print("üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ uvicorn –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   journalctl -u your-service-name -f")
    print("   –∏–ª–∏")
    print("   tail -f /path/to/your/logfile")

def check_disk_space():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ"""
    print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
    print("=" * 50)
    
    try:
        result = subprocess.run(['df', '-h'], capture_output=True, text=True)
        print(result.stdout)
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ")

def check_memory():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
    print("\nüß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
    print("=" * 50)
    
    try:
        result = subprocess.run(['free', '-h'], capture_output=True, text=True)
        print(result.stdout)
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")

def generate_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç"""
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
    print("=" * 50)
    
    report = {
        "timestamp": datetime.now().isoformat(),
        "server": "vm-fc7b7f29.na4u.ru",
        "checks": {
            "server_status": "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ",
            "webhook_status": "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ",
            "endpoints": "–ü—Ä–æ–≤–µ—Ä–µ–Ω—ã",
            "webhook_endpoint": "–ü—Ä–æ–≤–µ—Ä–µ–Ω"
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open('/tmp/server_check_report.json', 'w') as f:
        json.dump(report, f, indent=2)
    
    print("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /tmp/server_check_report.json")

if __name__ == "__main__":
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ vm-fc7b7f29.na4u.ru")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print(f"Python: {sys.version}")
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    check_server_status()
    check_webhook_status()
    test_local_endpoints()
    test_webhook_endpoint()
    check_logs()
    check_disk_space()
    check_memory()
    generate_report()
    
    print("\n" + "=" * 60)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
    print("3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
    print("   uvicorn app.main:app --host 0.0.0.0 --port 8000")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ (nginx/apache)")

